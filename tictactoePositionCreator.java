import java.io.FileWriter;
import java.util.*;

public class tictactoePositionCreator {

    private static Random r = new Random();

    public static char[] getPosition(){
        char[] board = {'_','_','_','_','_','_','_','_','_','X','9'};
        List<String> availableIndexes = new ArrayList<>(List.of("0", "1", "2", "3", "4", "5", "6", "7", "8"));
        int randStop =  r.nextInt(1,7);
        boolean isX = true;
        boolean isWin = false;
        int winIndex = 9;
        while (availableIndexes.size() >= randStop){
            int randMoveIndex = r.nextInt(0,availableIndexes.size());
            int randMove = Integer.parseInt(availableIndexes.get(randMoveIndex));
            availableIndexes.remove(randMoveIndex);
            board[randMove] = isX ? 'X' : 'O';
            isX = !isX;
            if(isWin(board)){
                // undo last move
                board[randMove] = 'a';
                isX = !isX;
                isWin = true;
                winIndex = randMove;
                break;
            }
        }
        // 2nd last is whose move it is
        board[board.length-2] = isX ? 'X' : 'O';
        //  1st last is if already a win, 9 == no win
        board[board.length-1] = isWin ? (char) (winIndex+'0'): '9';
        return board;

    }



    static List<String> positions = new ArrayList<>();
    static List<Integer> correctIndexes = new ArrayList<>();


    static HashSet<tictactoePos> positionsAutoGenerated = new HashSet<>();



    public static void createDataAutoGenerated(int numIters){
        for (int i = 0;i<numIters;i++){
            char[] randPos = getPosition();

            int winAlreadyFoundIndex = randPos[randPos.length-1] - '0';
            int index;
            if(winAlreadyFoundIndex != 9){
                // win found so pick that
                index = winAlreadyFoundIndex;
            }
            else{
                boolean isXTurn = randPos[randPos.length-2] == 'X';
                index = tryFindImediateWin(randPos,isXTurn);
            }
            if(index == -1){
                System.out.println("No immediate win found, skipping position");
            }
            else{
                System.out.println("Adding position");
                positionsAutoGenerated.add(new tictactoePos(Arrays.copyOf(randPos,randPos.length-2),index));
            }
        }

        System.out.println("Exiting auto creation after " + numIters + " iterations");
        System.out.println(positionsAutoGenerated.size() + " Unique datapoints");
        System.out.println("Saving to files...");
        saveToFile(positionsAutoGenerated,"AutoGenerated");

    }

    public static void createData(){
        Scanner scanner = new Scanner(System.in);
        while (true){
            char[] randPos = getPosition();
            printpos(randPos);
            int winAlreadyFoundIndex = randPos[randPos.length-1] - '0';
            int index = inputIndex(scanner,winAlreadyFoundIndex);
            if(index == -1){
                System.out.println("Exiting creation");
                System.out.println("Positions: " + positions.toString());
                System.out.println("Indexes: " + correctIndexes.toString());
                break;
            }
            else{
                positions.add(Arrays.toString(Arrays.copyOf(randPos,randPos.length-2)));
                correctIndexes.add(index);
            }
        }
        scanner.close();
    }

    public static int inputIndex(Scanner scanner,int winAlreadyFoundIndex){
        if(winAlreadyFoundIndex != 9){
            // randomly already found a way to win
            System.out.print("Please enter selected move index (enter -1 to exit) (Win already found press enter to use default of: " + winAlreadyFoundIndex + ")>> ");
            String line = scanner.nextLine();
            if(line.isEmpty()){
                // enter key pressed
                return winAlreadyFoundIndex;
            }
            else{
                return Integer.parseInt(line);
            }
        }
        else{
            System.out.print("Please enter selected move index (enter -1 to exit)>> ");
            return scanner.nextInt();
        }

        // Prompt the user for input

        // Read an integer from stdin

        // Close the scanner
    }

    private static void printpos(char[] pos){
        System.out.println("Position: ");
        System.out.println("Whose turn? : " + pos[pos.length-2]);
        for(int i = 0;i<pos.length-2;i++){
            System.out.print(pos[i]);
            if((i+1) % 3 == 0){
                System.out.print("    " + (i-2) + " " + (i-1) + " " + (i));
                System.out.println();
            }
        }
        System.out.println();
    }

    // for refererence:
    // [0,1,2]
    // [3,4,5]
    // [6,7,8]
    private static boolean isWin(char[] pos){
        return  is3Together(0,1,2,pos) ||
                is3Together(3,4,5,pos) ||
                is3Together(6,7,8,pos) ||
                is3Together(0,3,6,pos) ||
                is3Together(1,4,7,pos) ||
                is3Together(2,5,8,pos) ||
                is3Together(0,4,8,pos) ||
                is3Together(2,4,6,pos);
    }

    private static boolean is3Together(int x,int y, int z,char[] pos){
        return pos[x] == pos[y] && pos[x] == pos[z] && pos[x] != '_';
    }

    private static int tryFindImediateWin(char[] pos,boolean isXTurn){
        char testChar = isXTurn ? 'X' : 'O';
        for(int i = 0;i<pos.length-2;i++){
            if(pos[i] == '_'){
                // empty so we can try to see if this is winning
                pos[i] = testChar;
                if(isWin(pos)){
                    pos[i] = '_';
                    return i;
                }
                pos[i] = '_';


            }

        }
        return -1;
    }

    private static <T> void saveToFile(List<tictactoePos> objects,String fileName){
        try {
            FileWriter fileWriterPositions = new FileWriter(fileName + "_positions.txt");
            FileWriter fileWriterIndexes = new FileWriter(fileName + "_indexes.txt");
            for(tictactoePos p : objects){
                fileWriterPositions.write("\"" + p.getPosWithoutBrackets() + "\",");
                fileWriterIndexes.write(p.correctMoveIndex + ",");
            }
            fileWriterPositions.close();
            fileWriterIndexes.close();
        }
        catch (Exception e){
            e.printStackTrace();
        }

    }

    private static <T> void saveToFile(HashSet<tictactoePos> objects,String fileName){
        try {
            FileWriter fileWriterPositions = new FileWriter(fileName + "_positions.txt");
            FileWriter fileWriterIndexes = new FileWriter(fileName + "_indexes.txt");
            for(tictactoePos p : objects){
                fileWriterPositions.write("\"" + p.getPosWithoutBrackets() + "\",");
                fileWriterIndexes.write(p.correctMoveIndex + ",");
            }
            fileWriterPositions.close();
            fileWriterIndexes.close();
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }



}
